/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.proyecto1.Menu;

import java.awt.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;

/**
 *
 * @author jose
 */
public class Patron extends javax.swing.JPanel {

    private panelPrincipal panel;

    /**
     * Creates new form Patron
     */
    public Patron(panelPrincipal panel) {
        this.panel = panel;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        entrada = new javax.swing.JTextField();
        buscar = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 0, 0));
        setLayout(new java.awt.GridBagLayout());

        jLabel1.setBackground(new java.awt.Color(0, 255, 255));
        jLabel1.setForeground(new java.awt.Color(0, 255, 255));
        jLabel1.setText("Buscar una palabra");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(38, 22, 0, 0);
        add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 306;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(34, 30, 0, 0);
        add(entrada, gridBagConstraints);

        buscar.setBackground(new java.awt.Color(255, 255, 255));
        buscar.setForeground(new java.awt.Color(0, 0, 0));
        buscar.setText("Buscar");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 32, 32, 84);
        add(buscar, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        String busqueda = entrada.getText();
        if (busqueda.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No hay nada para buscar");
        } else {
            buscarpalabra(panel.getCentro().getTexto(), busqueda);
        }
    }//GEN-LAST:event_buscarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscar;
    private javax.swing.JTextField entrada;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    public void buscarpalabra(JTextArea area1, String texto) {
        if (texto.length() >= 1) {
            DefaultHighlighter.DefaultHighlightPainter highlightPainter = new DefaultHighlighter.DefaultHighlightPainter(Color.ORANGE);
            Highlighter h = area1.getHighlighter();
            h.removeAllHighlights();
            String text = area1.getText();
            String caracteres = texto;
            for (int i = 0; i < text.length(); i++) { //Recorre texto principal 
                String pal = "";
                if (i + caracteres.length() < text.length()) { // suma palabras para luego comparar
                    for (int j = 0; j < caracteres.length(); j++) {
                        char a = text.charAt(i + j);
                        pal = pal + a;
                    }
                    if (pal.equals(caracteres)) {
                        try {
                            h.addHighlight(i, (i + caracteres.length()), highlightPainter);

                        } catch (BadLocationException ex) {

                        }
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(area1, "la palabra a buscar no puede ser vacia");
        }
    }

    public void intervalo(String texto, String buscar) {
        String a = "";
        int inicio = 0;
        int fin = 0;
        for (int i = 0; i < texto.length(); i++) {
            char b = texto.charAt(i);
            if (b == ' ' || b == '\n') {
                for (int j = 0; j < a.length(); j++) {
                    if (inicio + 3 == a.length() - 1) {

                    } else {

                    }
                }
                a = "";
            } else {
                a = a + b;
            }
        }

    }
}
