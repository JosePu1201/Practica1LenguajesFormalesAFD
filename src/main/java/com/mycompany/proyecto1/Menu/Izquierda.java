/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.proyecto1.Menu;

import com.mycompany.proyecto1.Analisis.LeerLineas;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;


/**
 *
 * @author jose
 */
public class Izquierda extends javax.swing.JPanel {

    private panelPrincipal panel;
    private LeerLineas lectura;

    /**
     * Creates new form Izquierda
     *
     * @param panel
     */
    public Izquierda(panelPrincipal panel) {
        this.panel = panel;
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cargar = new javax.swing.JButton();
        comprobar = new javax.swing.JButton();
        limpiar = new javax.swing.JButton();

        setLayout(new java.awt.GridLayout(0, 1));

        cargar.setBackground(new java.awt.Color(0, 0, 0));
        cargar.setForeground(new java.awt.Color(0, 255, 255));
        cargar.setText("Cargar Archivo");
        cargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarActionPerformed(evt);
            }
        });
        add(cargar);

        comprobar.setBackground(new java.awt.Color(0, 0, 0));
        comprobar.setForeground(new java.awt.Color(0, 255, 255));
        comprobar.setText("Comprobar Tokens");
        comprobar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comprobarActionPerformed(evt);
            }
        });
        add(comprobar);

        limpiar.setBackground(new java.awt.Color(0, 0, 0));
        limpiar.setForeground(new java.awt.Color(0, 255, 255));
        limpiar.setText("Limpiar texto");
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });
        add(limpiar);
    }// </editor-fold>//GEN-END:initComponents

    private void cargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarActionPerformed
        try{
            panel.getCentro().getTexto().setText("");
            cargaDatos(panel.getCentro().getTexto());
        } catch (IOException ex) {
            Logger.getLogger(Izquierda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cargarActionPerformed

    private void comprobarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comprobarActionPerformed
        if (panel.getCentro().getTexto().getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "No hay nada para analizar");
            panel.getDerecha().invisible();
        } else {
            Derecha derecha = new Derecha(panel);
            panel.setDerecha(derecha);
            panel.agregar();
            String[] lineas = prueba(panel.getCentro().getTexto());
            panel.getCentro().getTexto().setText("");
            lectura = new LeerLineas(lineas, panel.getCentro().getTexto());
            lectura.analizar();
        }
    }//GEN-LAST:event_comprobarActionPerformed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
        panel.getCentro().getTexto().removeAll();
        panel.getCentro().getTexto().setText("");
    }//GEN-LAST:event_limpiarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cargar;
    private javax.swing.JButton comprobar;
    private javax.swing.JButton limpiar;
    // End of variables declaration//GEN-END:variables

    public panelPrincipal getPanel() {
        return panel;
    }

    public void setPanel(panelPrincipal panel) {
        this.panel = panel;
    }

    private void cargaDatos(JTextArea texto) throws FileNotFoundException, IOException {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(fileChooser);
//        try {
        try {
            String ruta = fileChooser.getSelectedFile().getAbsolutePath();

            File f = new File(ruta);
            try (FileReader fr = new FileReader(f) //Lee el archivo
                    ) {
                BufferedReader br = new BufferedReader(fr);//Lee las lineas del archivo
                String linea;
                int i = 1;
                while ((linea = br.readLine()) != null) {//Lee linea por linea
                    texto.append(linea + "\n");
                    i++;
                }
            }

        } catch (NullPointerException e) {

        }
    }

    public LeerLineas getLectura() {
        return lectura;
    }

    public void setLectura(LeerLineas lectura) {
        this.lectura = lectura;
    }

    public String[] prueba(JTextArea text) {
        int i = 0;
        String texto = text.getText() + "\n";
        String algo = "";
        ArrayList<String> lo = new ArrayList<>();
        for (int j = 0; j < texto.length(); j++) {
            char a = texto.charAt(j);
            if (a != '\n') {
                algo = algo + a;
            } else {

                lo.add(algo);
                algo = "";
            }
        }
        String lineas[] = new String[lo.size()];
        int k = 0;
        for (String los : lo) {
            lineas[k] = los;
            k++;
        }
        return lineas;
    }
}
